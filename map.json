{

	"trimethyl":{
		"name": "Trimethyl Bootstrap",
		"description": "Boostrap for Trimethyl"
	},

	"animator":{
		"name": "Animator",
		"description": "UI animation helper, providing built-in animations.",
		"dependencies": ["matrix"]
	},
	"app":{
		"name": "App",
		"description": "Application related utilites to handle deep links and iOS universal links, in-app updates and user-interactions.",
		"dependencies": ["util","router","http","dialog"]
	},
	"auth":{
		"name": "Auth",
		"description": "Authentication with a web server using Backbone User model, supporting cookie-based and OAuth 2 via social logins.",
		"dependencies": ["http","event","dialog","ext/q","auth/bypass","support/oauth"],
		"modules": ["ti.touchid:iphone","ti.touchid:android"]
	},
	"auth/bypass":{
		"name": "Auth.Bypass",
		"description": "Bypass driver."
	},
	"auth/facebook":{
		"name": "Auth.Facebook",
		"description": "Facebook driver for authentication.",
		"dependencies": ["fb","prop"]
	},
	"auth/std":{
		"name": "Auth.Standard",
		"description": "Standard driver for authentication.",
		"dependencies": ["prop"]
	},
	"cache":{
		"name": "Cache",
		"description": "Store informations temporarily using different storages.",
		"dependencies": ["cache/database"]
	},
	"cache/database":{
		"name": "Cache.Database",
		"description": "Cache driver with SQLite",
		"dependencies": ["sqlite","util","filesystem"]
	},
	"calendar": {
		"name": "Calendar",
		"description": "Calendar related utilities",
		"dependencies": ["permissions/calendar","util","ext/rrule"],
		"modules": ["lucadamico.android.calendar:android"],
		"minsdk": "6.0.0"
	},
	"camera":{
		"name": "Camera",
		"description": "Helper for Camera access.",
		"dependencies": ["util","dialog", "permissions/camera"]
	},
	"db":{
		"name": "DB",
		"description": "Alias for Ti.Database but secure",
		"dependencies": ["prop", "util"],
		"modules": ["appcelerator.encrypteddatabase:iphone","appcelerator.encrypteddatabase:android"]
	},
	"device":{
		"name": "Device",
		"description": "Retrieve informations about current device."
	},
	"dialog":{
		"name": "Dialog",
		"description": "Show dialogs with an alternative dictionary-based syntax."
	},
	"event":{
		"name": "Event",
		"description": "Global event manager based on Backbone.Events."
	},
	"fb":{
		"name": "FB",
		"description": "Proxy for Facebook SDK adding global listeners and useful methods.",
		"modules": ["facebook:iphone","facebook:android"],
		"dependencies": ["util"]
	},
	"filesystem":{
		"name": "Filesystem",
		"description": "Filesystem proxy adding convenience methods about directories.",
		"dependencies": ["permissions/storage"]
	},
	"flow":{
		"name": "Flow",
		"description": "Manages the app windows flow using a global navigator and exposing informations about opened controller and windows. It also tracks the screen view and timing automatically.",
		"dependencies": ["event","ga"]
	},
	"forcetouchmenu":{
		"name": "ForceTouchMenu",
		"description": "Creation of the forcetouch app icon menus programmatically",
		"dependencies": ["router","ext/q","event"]
	},
	"ga":{
		"name": "GA",
		"description": "Google Analytics proxy with error-aware tracking.",
		"modules": ["ti.ga:iphone","ti.ga:android"]
	},
	"geo":{
		"name": "Geo",
		"description": "Geographic API proxy including geocoding features using Google, and map additional features like internal marker clustering.",
		"dependencies": ["http","util","event","dialog","ext/q"],
		"modules": ["ti.map:iphone","ti.map:android"]
	},
	"http":{
		"name": "HTTP",
		"description": "HTTP requests in a clear interface with automatic internal cache control, automatic body encoding based on content, middleware filters and optional SSL pinning.",
		"dependencies": ["event","util","cache","ext/q","permissions/storage"],
		"modules": ["appcelerator.https:iphone", "appcelerator.https:android"]
	},
	"image":{
		"name": "Image",
		"description": "Image manipulation features to resize, crop or edit images in a clear interface."
	},
	"logger":{
		"name": "Logger",
		"description": "Writes messages to the console or other outputs.",
		"dependencies": ["logger/api"]
	},
	"logger/api":{
		"name": "Logger.Api",
		"description": "Logs messages to the console, using the standard Ti.API methods."
	},
	"matrix":{
		"name": "Matrix",
		"description": "Matrix helper"
	},
	"notifications":{
		"name": "Notifications",
		"description": "Push notifications module with interactive notification supports handling all platforms with one single interface, and communicating with several online service or with your custom server.",
		"dependencies": ["event","util","router","ext/q"],
		"modules": ["ti.goosh:android"]
	},
	"notifications/http":{
		"name": "Notifications.HTTP",
		"description": "Driver based on HTTP.",
		"dependencies": ["http","util"]
	},
	"notifications/cloud":{
		"name": "Notifications.Cloud",
		"description": "Driver based on CloudPush of Appcelerator.",
		"modules": ["ti.cloud:commonjs"]
	},
	"offline/sqlrest":{
		"name": "Offline.SQLRest",
		"description": "Support for offline adapter",
		"dependencies": ["sqlite","util","ext/q"]
	},
	"payments":{
		"name": "Payments",
		"description": "In-app Payments for both platforms",
		"dependencies": ["util","ext/q"],
		"modules": ["ti.inappbilling:android", "ti.storekit:iphone"]
	},
	"permissions/camera":{
		"name": "Permissions.Camera",
		"description": "Handle permissions requests for different modules with all platforms."
	},
	"permissions/contacts":{
		"name": "Permissions.Contacts",
		"description": "Handle permissions requests for different modules with all platforms."
	},
	"permissions/phone":{
		"name": "Permissions.Phone",
		"description": "Handle permissions requests for different modules with all platforms."
	},
	"permissions/storage":{
		"name": "Permissions.Storage",
		"description": "Handle permissions requests for different modules with all platforms."
	},
	"permissions/calendar":{
		"name": "Permissions.Calendar",
		"description": "Handle permissions requests for different modules with all platforms."
	},
	"prop":{
		"name": "Prop",
		"description": "Alias for Ti.App.Properties but secure.",
		"dependencies": ["util"],
		"modules": ["bencoding.securely:iphone","bencoding.securely:android"]
	},
	"router":{
		"name": "Router",
		"description": "You can emulate the routing concept adopted in many web framework, to handle incoming universal links and manage your app architecture.",
		"dependencies": ["util","flow","ext/q"]
	},
	"sentry": {
		"name": "Sentry",
		"description": "Handles exceptions and actions to have a real time reporting on bugs",
		"dependencies": ["ext/raven", "http", "util"]
	},
	"sharer":{
		"name": "Sharer",
		"description": "It provides a simple interface to share link on various social networks / chat systems like Facebook, Twitter, Telegram, WhatsApp and all you can imagine.",
		"dependencies": ["fb","ga","util","dialog"],
		"modules": ["bencoding.sms:iphone","dk.napp.social:iphone"]
	},
	"sounds":{
		"name": "Sounds",
		"description": "Proxy to play sounds using a local cache."
	},
	"spotlight":{
		"name": "Spotlight",
		"description": "Spotlight helpers for iOS",
		"dependencies":["util"]
	},
	"sqlite":{
		"name": "SQLite",
		"description": "SQLite abstraction layer providing a fluent interface to do query and fetch data from a remote/local SQLite database.",
		"dependencies": ["db"]
	},
	"uifactory":{
		"name": "UIFactory",
		"description": "Façade for new UI elements and cross-platform UI elements. It has a lot of  views that you can use when some features are missing."
	},
	"uifactory/actionbutton":{
		"name": "UIFactory.ActionButton",
		"description": "Button façade"
	},
	"uifactory/backgroundview":{
		"name": "UIFactory.BackgroundView",
		"description": "A view with the ability to set background images in cover/contain"
	},
	"uifactory/button":{
		"name": "UIFactory.Button",
		"description": "Button façade"
	},
	"uifactory/dateselect":{
		"name": "UIFactory.DateSelect",
		"description": "Date select façade",
		"dependencies": ["dialog","util"]
	},
	"uifactory/iframe":{
		"name": "UIFactory.Iframe",
		"description": "Iframe façade"
	},
	"uifactory/imageview":{
		"name": "UIFactory.ImageView",
		"description": "ImageView façade",
		"dependencies": ["uiutil"]
	},
	"uifactory/imageloadingview":{
		"name": "UIFactory.ImageLoadingView",
		"description": "ImageLoadingView façade"
	},
	"uifactory/label":{
		"name": "UIFactory.Label",
		"description": "Button façade"
	},
	"uifactory/listview":{
		"name": "UIFactory.ListView",
		"description": "ListView façade"
	},
	"uifactory/multiselect":{
		"name": "UIFactory.MultiSelect",
		"description": "Multicolumn select façade",
		"dependencies": ["dialog"]
	},
	"uifactory/navigationwindow":{
		"name": "UIFactory.NavigationWindow",
		"description": "It re-creates a new concept of Android Activity that works just like an iOS NavigationWindow with the same syntax."
	},
	"uifactory/select":{
		"name": "UIFactory.Select",
		"description": "Select façade",
		"dependencies": ["dialog","util"]
	},
	"uifactory/soundcloudclassicwebview":{
		"name": "UIFactory.SoundCloudClassicWebView",
		"description": "Renderer for soundcloud tracks"
	},
	"uifactory/tabbedbar":{
		"name": "UIFactory.TabbedBar",
		"description": "TabbedBar façade"
	},
	"uifactory/textarea":{
		"name": "UIFactory.Textarea",
		"description": "Textarea façade",
		"dependencies": ["uiutil"]
	},
	"uifactory/textfield":{
		"name": "UIFactory.Textfield",
		"description": "Textfield façade",
		"dependencies": ["uiutil"]
	},
	"uifactory/timeselect":{
		"name": "UIFactory.TimeSelect",
		"description": "Time select façade",
		"dependencies": ["dialog","util"]
	},
	"uifactory/view":{
		"name": "UIFactory.View",
		"description": "View façade",
		"dependencies": ["uiutil"]
	},
	"uifactory/window":{
		"name": "UIFactory.Window",
		"description": "It provides a clear way to handle both iOS / Android windows with a single UI module.",
		"dependencies": ["uiutil"]
	},
	"uifactory/youtubevideowebview":{
		"name": "UIFactory.YoutubeVideoWebView",
		"description": "YoutubeVideoWebView façade"
	},
	"uifactory/facebookvideowebview":{
		"name": "UIFactory.FacebookVideoWebView",
		"description": "FacebookVideoWebView façade"
	},
	"uifactory/zoomimageview":{
		"name": "UIFactory.ZoomImageView",
		"description": "ImageView with pinch-to-zoom",
		"modules": ["org.iotashan.TiTouchImageView:android"]
	},
	"uiutil":{
		"name": "UIUtil",
		"description": "UI related utilities.",
		"dependencies": ["image","http"]
	},
	"util":{
		"name": "Util",
		"description": "Simply, utilities.",
		"dependencies": ["dialog", "permissions/phone"],
		"modules": ["ti.safaridialog:iphone"]
	},
	"validator":{
		"name": "Validator",
		"description": "Validates a string against a regular expression. Comfy for email validation"
	},
	"weballoy":{
		"name": "WebAlloy",
		"description": "µ-web-framework to write Alloy apps using only web technologies (HTML/CSS/JS) but interfacing in real time with native features. Could you re-create a mini PhoneGap framework in Titanium; the answer is yes."
	},
	"xmlparser": {
		"name": "XMLParser",
		"description": "Parser for html/xml data which exposes the tags and gives you the ability to manage them through proxies",
		"dependencies": ["support/xmlparser/proxies", "support/xmlparser/extract"],
		"minsdk": "5.2.2.CAFFEINA-2"
	},

	"alloy/sync/api":{
		"name": "API Alloy Adapter",
		"description": "A sync for Backbone to work with HTTP models.",
		"dependencies": ["http","util"],
		"destination": "/app/lib/alloy/sync/api.js"
	},

	"alloy/sync/hateoas":{
		"name": "HATEOAS Alloy Adapter",
		"description": "A sync for Backbone to work with HTTP models with a HATEOAS structure.",
		"dependencies": ["http","util"],
		"destination": "/app/lib/alloy/sync/hateoas.js"
	},

	"alloy/sync/rest":{
		"name": "REST Alloy Adapter",
		"description": "A sync for Backbone to work with RESTful APIs.",
		"dependencies": ["http","util"],
		"destination": "/app/lib/alloy/sync/rest.js"
	},

	"alloy/sync/offline":{
		"name": "Offline Alloy Adapter",
		"description": "A sync for Offline adapter.",
		"dependencies": ["offline/sqlrest"],
		"destination": "/app/lib/alloy/sync/offline.js"
	},

	"ext/async":{
		"name": "Async",
		"source": "/node_modules/async/dist/async.js"
	},

	"ext/q":{
		"name": "Q",
		"source": "/node_modules/q/q.js"
	},

	"ext/raven":{
		"name": "Raven",
		"dependencies": []
	},
	
	"ext/underscore.string":{
		"name": "Underscore.String",
		"source": "/node_modules/underscore.string/dist/underscore.string.js"
	},
	
	"ext/rrule":{
		"name": "RRule",
		"source": "/node_modules/rrule/lib/rrule.js",
		"dependencies":["ext/nlp"]
	},
	"ext/nlp":{
		"name": "RRule NLP",
		"source": "/node_modules/rrule/lib/nlp.js",
		"dependencies":[]
	},
	"ext/nlp-i18n/it":{
		"name": "RRule NLP - Italian",
		"dependencies":[]
	},

	"support/oauth":{
		"name": "OAuth internal module",
		"internal": true
	},
	"support/xmlparser/extract": {
		"name": "XMLParser.Extract",
		"description": "Extracts the first xml tag found with all the content inside.",
		"internal": true
	},
	"support/xmlparser/proxies": {
		"name": "XMLParser.Proxies",
		"description": "Default proxies for the xmlparser/parser module.",
		"internal": true
	}
}
